(load-file "./0xc.el")
(require '0xc)
(require 'subr-x)
(ert-deftest 0xc--infer-base-test ()
  (let ((user-0xc-clamp-ten 0xc-clamp-ten)
        (user-0xc-clamp-hex 0xc-clamp-hex)
        (user-0xc-max-base 0xc-max-base))
    (should (equal (condition-case err (0xc--infer-base "37:shouldfail")
                     (error (cdr err))) `(,(format "Number exceeds maximum allowed base: %s" 0xc-max-base))))
    (should (equal (condition-case err (0xc--infer-base "thi$willfail")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "16::f9281")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "16::f9281")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "-1:f9281")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "a1:f9281")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "1,000:f9281")
                     (error (cdr err))) '("Not a number")))
    (should (equal (condition-case err (0xc--infer-base "1,000:f9281")
                     (error (cdr err))) '("Not a number")))
    (setq 0xc-max-base 10)
    (should (equal (condition-case err (0xc--infer-base "36:010101010")
                     (error (cdr err))) `(,(format "Number exceeds maximum allowed base: %s" 0xc-max-base))))
    (should (equal (condition-case err (0xc--infer-base "0x0101")
                     (error (cdr err))) `(,(format "Number exceeds maximum allowed base: %s" 0xc-max-base))))
    (should (equal (condition-case err (0xc--infer-base "ziltoid")
                     (error (cdr err))) `(,(format "Number exceeds maximum allowed base: %s" 0xc-max-base))))
    (setq 0xc-clamp-ten nil)
    (setq 0xc-clamp-hex nil)
    (setq 0xc-max-base 36)
    (should (equal (0xc--infer-base "efefef") 16))
    (should (equal (0xc--infer-base "abcde") 15))
    (should (equal (0xc--infer-base "0a0a0a") 11))
    (should (equal (0xc--infer-base "75") 8))
    (should (equal (0xc--infer-base "12") 3))
    (should (equal (0xc--infer-base "101010") 2))
    (should (equal (0xc--infer-base "ziltoid") 36))
    (should (equal (0xc--infer-base "emacs") 29))
    (should (equal (0xc--infer-base "0b101010") 2))
    (should (equal (0xc--infer-base "0t102010") 3))
    (should (equal (0xc--infer-base "0o123456") 8))
    (should (equal (0xc--infer-base "0d246810") 10))
    (should (equal (0xc--infer-base "0x101010") 16))
    (should (equal (0xc--infer-base "22:10101")  22))
    (should (equal (0xc--infer-base "1:000000") 1))
    (should (equal (0xc--infer-base "7:100") 7))
    (setq 0xc-clamp-ten t)
    (should (equal (0xc--infer-base "efefef") 16))
    (should (equal (0xc--infer-base "abcde") 15))
    (should (equal (0xc--infer-base "0a0a0a") 11))
    (should (equal (0xc--infer-base "75") 10))
    (should (equal (0xc--infer-base "12") 10))
    (should (equal (0xc--infer-base "101010") 2))
    (should (equal (0xc--infer-base "ziltoid") 36))
    (should (equal (0xc--infer-base "emacs") 29))
    (should (equal (0xc--infer-base "0b101010") 2))
    (should (equal (0xc--infer-base "0t102010") 3))
    (should (equal (0xc--infer-base "0o123456") 8))
    (should (equal (0xc--infer-base "0d246810") 10))
    (should (equal (0xc--infer-base "0x101010") 16))
    (should (equal (0xc--infer-base "22:10101") 22))
    (should (equal (0xc--infer-base "1:000000") 1))
    (setq 0xc-clamp-ten nil)
    (setq 0xc-clamp-hex t)
    (should (equal (0xc--infer-base "efefef") 16))
    (should (equal (0xc--infer-base "abcde") 16))
    (should (equal (0xc--infer-base "0a0a0a") 16))
    (should (equal (0xc--infer-base "75") 16))
    (should (equal (0xc--infer-base "12") 16))
    (should (equal (0xc--infer-base "101010") 2))
    (should (equal (0xc--infer-base "ziltoid") 36))
    (should (equal (0xc--infer-base "emacs") 29))
    (should (equal (0xc--infer-base "0b101010") 2))
    (should (equal (0xc--infer-base "0t102010") 3))
    (should (equal (0xc--infer-base "0o123456") 8))
    (should (equal (0xc--infer-base "0d246810") 10))
    (should (equal (0xc--infer-base "0x101010") 16))
    (should (equal (0xc--infer-base "22:10101") 22))
    (should (equal (0xc--infer-base "1:000000") 1))
    (setq 0xc-clamp-ten t)
    (should (equal (0xc--infer-base "efefef") 16))
    (should (equal (0xc--infer-base "abcde") 16))
    (should (equal (0xc--infer-base "0a0a0a") 16))
    (should (equal (0xc--infer-base "75") 10))
    (should (equal (0xc--infer-base "12") 10))
    (should (equal (0xc--infer-base "101010") 2))
    (should (equal (0xc--infer-base "ziltoid") 36))
    (should (equal (0xc--infer-base "emacs") 29))
    (should (equal (0xc--infer-base "0b101010") 2))
    (should (equal (0xc--infer-base "0t102010") 3))
    (should (equal (0xc--infer-base "0o123456") 8))
    (should (equal (0xc--infer-base "0d246810") 10))
    (should (equal (0xc--infer-base "0x101010") 16))
    (should (equal (0xc--infer-base "22:10101") 22))
    (should (equal (0xc--infer-base "1:000000") 1))
    (setq 0xc-clamp-ten user-0xc-clamp-ten)
    (setq 0xc-clamp-hex user-0xc-clamp-hex)
    (setq 0xc-max-base user-0xc-max-base)))

(ert-deftest 0xc--strip-padding-test ()
  (let ((user-0xc-padding 0xc-padding))
    (setq 0xc-padding " _.,")
    (should (equal (0xc--strip-padding "1_2_3") "123"))
    (should (equal (0xc--strip-padding "1...") "1"))
    (should (equal (0xc--strip-padding "100,000:0,123,456,789") "100000:0123456789"))
    (should (equal (0xc--strip-padding "0.,xa..b_f  f") "0xabff"))
    (should (equal (0xc--strip-padding "1       7.:,30,30,30") "17:303030"))
    (setq 0xc-padding "0")
    (should (equal (0xc--strip-padding "0b001010110100") "b11111")) ; Perhaps this should throw an exception
    (setq 0xc-padding user-0xc-padding)))

(ert-deftest 0xc--digit-value-test ()
  (setq 0xc--digit-value-test--int "0")
  (setq 0xc--digit-value-test--letter "a")
  (while (and (not (equal "0" 0xc--digit-value-test--int))
              (not (equal "z" 0xc--digit-value-test--letter)))
    (should (equal (0xc--digit-value 0xc--digit-value-test--int)
                   (string-to-int 0xc--digit-value-test--int)))
    (should (equal (+ 10 (string-to-int 0xc--digit-value-test--int))
                   (0xc--digit-value 0xc--digit-value-test--letter)
                   (upcase (0xc--digit-value 0xc--digit-value-test--letter))))
    (setq 0xc--highest-test--int (string (1+ (aref 0xc--digit-value--int 0))))
    (setq 0xc--highest-test--letter (string (1+ (aref 0xc--digit-value--letter 0)))))
  (setq 0xc--digit-value-test--int nil)
  (setq 0xc--digit-value-test--letter nil))

(ert-deftest 0xc--reverse-string-test ()
  (should (equal (0xc--reverse-string "racecar") "racecar"))
  (should (equal (0xc--reverse-string "1234567890") "0987654321"))
  (should (equal (0xc--reverse-string "0x10ff") "ff01x0"))
  (should (equal (0xc--reverse-string "0d246810") "018642d0")))

(ert-deftest 0xc--strip-base-hint-test ()
  (should (equal (0xc--strip-base-hint "0:0") "0"))
  (should (equal (0xc--strip-base-hint "1234567890") "1234567890"))
  (should (equal (0xc--strip-base-hint "0x10ff") "10ff"))
  (should (equal (0xc--strip-base-hint "0d246810") "246810"))
  (should (equal (0xc--strip-base-hint "0x") ""))
  (should (equal (0xc--strip-base-hint "0:") ""))
  (should (equal (0xc--strip-base-hint "ffffff") "ffffff"))
  (should (equal (0xc--strip-base-hint "1234567890:1") "1")))

(ert-deftest 0xc-convert-test ()
  (should (equal (0xc-convert 10 "0xff" t) "255"))
  (should (equal (0xc-convert 10 "0b1010" t) "10"))
  (should (equal (0xc-convert 8 "7:100" t) "61"))
  (should (equal (0xc-convert 10 "5:41300" t) "2700"))
  (should (equal (0xc-convert 12 "0t10201020" t) "1696")))

(ert-deftest 0xc-extend-test ()
  (should (equal (condition-case err (0xc--extend-number "..00..") (error (cdr err)))
                 '("Only one extension token may be used")))
  (should (equal (condition-case err (0xc--extend-number "12345..6789") (error (cdr err)))
                 '("The digit before and after the extension token must be the same")))
  (should (equal (0xc--extend-number "12345") "12345"))
  (should (equal (0xc--extend-number "10100..") "10100000"))
  (should (equal (0xc--extend-number "1010..") "1010"))
  (should (equal (0xc--extend-number "ffffff..") "ffffffff"))
  (should (equal (0xc--extend-number "1.2.3.4.5.6..") "1.2.3.4.5.666666"))
  (should (equal (0xc--extend-number "WHEEEEEEEE..") "WHEEEEEEEEEEEEEE"))
  (should (equal (0xc--extend-number "..111") "1111"))
  (should (equal (0xc--extend-number "01..100") "01111100"))
  ;; TODO: Check that each symbol being extended is a digit
  (should (equal (0xc--extend-number "...") ".")))
